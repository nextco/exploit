# Python 2.7 x86
# Solution for auto evaluation: Level 5
# Curso IDA Pro de Ricardo Narvaja.
# by @rextco
import string
import random
import struct
import sys


def read_file(file_name):
    with open(file_name, "rb") as f:
        content = f.read()
    return bytearray(content)


def write_file(file_name, content):
    with open(file_name, "wb") as f:
        f.write(content)


def random_word(length):
    letters = string.ascii_uppercase
    return "".join(random.choice(letters) for char in range(length))


def exploit():
    print("Exploit!Generate!File")

    # IDA sirve para hallar los numeros negativos: ? (calc) / -0xBAADF00D + 0x46
    # WinDbg: ? -0xBAADF00D + 0x46 = 0x45521039
    # Tricky: Windows calc (change the sign on hex with +- operator then add 0x46)
    # Setup
    stuff = ""
    stuff += random_word(0xBD)                              # buf
    # stuff += struct.pack("<I", 0x45521039)                # on debugger
    stuff += struct.pack("<I", 0x44)                        # 0x44 + 0x2 = 0x46
    stuff += struct.pack("<I", 0x45)
    stuff += "\x00" * (200 - len(stuff))

    write_file("example.txt", stuff)
    print("length = {:d}".format(len(stuff)))
    # print("content = {}".format(stuff))


if __name__ == "__main__":
    exploit()

# mov ecx, [ebp+p_buf]
# mov edx, [ecx+0CCh] ; edx = dword
# mov eax, [ebp+p_buf]
# add edx, [eax] << ? edx + poi(eax)
# cmp edx, 46h
# jnz short loc_8010B9
